Binary Search 
	- Binary search is an algorithm and its input is a sorted list of elements, if an element you're looking for is in that list, it returns the position of where it's located, otherwise it returns null. 
		- Binary search starts in the middle, elimenate half the remaining index each time, and each step you eleminate another half until you find the right index/number/string/etc. 
			- Binary search will take log2 n steps to run in the worst case, whereas simple search will take n steps.
			- Binary search only works if the list is sorted

		Binary search in python 

		def binary_search(list, item):
			low = 0
			high = len(list) - 1

			while low <= high:
				mid = (low + high)
				guess = [mid]
				if guess == item: 
					return mid
				if guess  > item: 
					high = mid - 1 
				else: 
					low = mid + 1 
			return None
		my_list = [1, 3, 4, 7, 9]

		print binary_search(my_list, 3) - 1
		print binary_search(my_list, -1) - None

		- Binary search in a list of 100 would only take 7 guesses at most 
		- 4 billion it would take at most 32

- Big O Notation 
	- Tells you how fast an algorithm is 
	- Big O lets you compare the number of operations. It tells you how fast the algorithm grows. 
		- O(n) - what big o notation looks like, it's O (log n) aka O (number of operations)
		- Big O establishes worst case run time
		- O(n) is reassurance because it will never be more than having to look at every single entry 
		