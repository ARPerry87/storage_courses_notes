creating hash maps to create an adjacency list in order to populate a graph to create the graph algorithm 

adjacency list 

{
	a: [b, c], 
	b: [d], 
	c: [e], 
	d: [],
	e: [b],
	f: [d]
}

here you write all the neighbors in the graph for the graph, so for a, the neighbor of the directed graph is c and b, for b, it's d, for it's e, as these are the directions that point towards the things. 

even as a node has no neighbors it should still appear as a key, even if it has no neighbors (it had no outgoing direction) 

depth first traversal on this graph 

	- If we commit to depth first traversal, we commit to going 
		- B, then D
		- Then go back, and go to C, then E, then to D, and then we exhaust and can't to go F and we've exhausted DFS 


	So for DFS our first sequence is 
		- a, b, d


BFS (breadth first traversal)

	- a, b, c first instead, so for this you exhaust the nodes around the root instead versus around the edge 


Depth first you explore in one direction as far as possible before exhausting it 

Breadth first you explore all immediate neighbors first and evenly 

DFS uses stack 

BFS uses Queue 



New Hash Table 

{
	a: [b, c],
	b: [d],
	c: [e],
	d: [f],
	f: []
}

So when doing this, imagine when doing a print function, going through it as a stack and popping the top of it. You would have to go through it in a single line from: 

a to b then to c, then to d, then to e, then to f, but then you would have to come up to change directions (as f has no neighbors so you would have to change directions) to come back up to c, in order to print out to e, so here is the full list: 

a, b, c, d, f, c, e 


For BFS for this Hashtable 

For breadth first you work off of queueing and dequeuing, so you work off of putting neighbors of a node in and out of a queue. So you would start off with A's neighbors to the back of the queue, which would be b, and c, then add b's neighbors, and so on and so forth, which would end up with a sorted queue  

a, b, c, d, e, f 

Implimented with JS! 

DFS Javascript 

/*
/*const depthFirstPrint = (graph, source) => {

	const stack = [source];

	while(stack.length > 0){

		current = stack.pop();
		console.log(current);

		for (let let neighbor of graph[current]) {
			stack.push(neighbor);
		}
	}
};
*/

//Now for recursion since this ^^ was iterative and iterative can take up a lot of space 

/*const depthFIrstPrint = (graph, source) => {

	console.log(source);
	for(let neighbor of graph[source]){
		depthFirstPrint(graph, neighbor);

	}	

};
*/
//because there's implicitly an empty case a recurisve method works as a base case 
//Commenting all this out so that we can work on BFS now this all works 

BFS Javascript 


const breadthFirstPrint = (graph, source) = >{
	const queue = [source]; 
	while(queue.length > 0) {
		const current = queue.shift();
		console.log(current);
		for (let neighbor of graph[current]) {
			queue.push(neighbor);
		}
	}
};

const graph = {
	a: :['b', 'c'],
	b: ['d'],
	c: ['e'],
	d: ['f'],
	e: [],
	f: []

};

//depthFirstPrint(graph, a); //abdfce

breadthFirstPrint(graph 'a'); 




New Hash Table 

{
	f: [g, i],
	g: [h],
	h: [], 
	i: [g, k],
	k: []
}


JS has path solution 


Breadth first


const hasPath = (graph, src, dst) => {
	const queue - [src]; 

	while(queue.length > 0) {
		const current = queue.shift();
		
		if (current ===dist) return true;
		
		for (let neighbor of graph[current]) {
			queue.push(neighbor);
		}
	}

	return false
};




/*

Depth first

const hasPath = (graph, src, dst) => {
	if (src === dst) return true;

	for(let neighbor of graph[src]) {
		if ( hasPath(graph, neighbor, dst); === true){
			return true;
		} 
	}

	return false; //we shouldn't return false until down here because otherwise it'll become cyclic 
};

*/


Undirected Graph

Edges: {
	i:[j,k],
	j:[i],
	k:[i, m, l],
	m: [k],
	l: [k]
	o:[n],
	n:[o]
}


Marking visisted nodes to avoid infinite loops 

const undirectedPath = (edges, nodeA, nodeB) => {
	const graph = buildGraph(edges);
	console.log(graph);
	return hasPath(graph, nodeA, nodeB, new Set());  //creating a start node and end node and returning a boolean, also adding a set will make sure that you don't visit a node more than once 

};

const hasPath = (graph, src, dst, visisted) => {
	if (visited.has(src)) return false; //no reason to travel to a node that's already been visisted 
	if  
	if (src == dest) return true; //creating base case

	visited.add(src); //adds to the visisted set 



	for (let neighbor of graph[src]) { //going to iterate through the paths and find each neighbors
		if hasPath(graph, neighbor, dst, visited) == true) { //returning the boolean of if it's true or false for having a path 
			return true;
		}
	}

	return false;

};

const buildGraph(edges) => {
	const graph = {};
	for( let edge of edges) { // we are going to make a adjacency graph and turn the edges into key value pairs  
		const [a, b] = edge; //pull out the edges and turn them into keys 
		if(!(a in graph)) graph[a] = []; //check if a is a value in the graph, and if it isn't, then initialize it in the graph and make an empty array
		if(!(b in graph)) graph[b] = []; // do the same for b 
		graph[a].push(b); //b should be a neighbor of a 
		graph[b].push(a); // a should be a neighbor of b so that this makes a symetric graph 
	}


	return graph;
};

const edges = [
	['i', 'j'],
	['k', 'i'],
	['m,', 'k'],
	['k', 'l'],
	['o', 'n']
];

//undirectedPath(edges, 'j', 'm';)

//Connected Components 

const connectedComponentsCount = (graph) => { 
	const visited = new Set();
	for(let node in graph) {
	if (explore (graph, node, visited) == true) {
	 count += 1
	 	}

	}

	return count;
};

const explore = (graph, current, visited) => {
	if (visited.has(String(current))) return false;

	visited.add(String(current)); 

	for(let neighbor of graph[current]) {
		explore(graph, neighbor, visited);
	}

	return true;

}

// const largestComponent = (graph) => {
	let longest = 0; //sets the max value
	const visited = new Set();
	 for (let node in graph) { // iterating through the nodes of the graph 
	 	const size = exploreSize(graph, node, visited) //starting traversal through the connected component and feeding it the visited set 
	 	if (size > longest) longest = size; // sets the new longest value if size becomes larger than longest 
	 }
	
	return longest; //returns longest 
};

const exploreSize = (graph, node, visited) => { 
	if (visited.has(node)) return 0; //makes sure that if we've visited a node we mark it as zero 

	visited.add(node); //if we haven't visited we mark it as 1 and then we add it to this list 

	let size = 1; 

	for(let neighbor of graph[node]) { //start to iterate through nodes and count the nodes, and get the size total of the connected component
		size += exploreSize(graph, neighbor, visited);
	}

	return size;

}

//shortest path graph 

Breadth first traversal would work best for shortest path typically, and that means using a queue, and so you use node, distance. Adding all neighbors from the source node into the queue as (node, distance) to find the shortest distance is a very useful sorting method. 

Linear complexity 

const shortestPath (edges, nodeA, nodeB) => {
	visited = new Set([nodeA]);
	const graph = buildGraph(edges);

	const queue = [ [nodeA, 0]];

	while (queue.length > 0) {
		const [node, distance]queue.shift();

		if (node == nodeB) return distance; 
		for ( let neighbor of graph[node]){
		if (!visited.has(neighbor)){
			visited.add(neighbor);
			queue.push([neighbor, distance +1]);
			}

		}
	}

	return -1;
};

const buildGraph = (edges) => {

	const graph =[];

	for (let edge of edges) {
		const [a, b] = edge;
		if (!(a in graph)) graph[a] = [];
		if (!(b in graph)) graph [b] = [];
		graph[a].push(b);
		graph[b].push(a);
	}
	

	return graph;
};


// Island and water problem using iterative traversal and depth first 

const islandCount = (grid) => {
	visited = new Set();
	let count = 0;
	for (let r = 0; r < grid.length; r+=1) {
		for (let c = 0; c < grid[0l.length; c +=1) {
			if (explore(grid, r, c, visited)) == true {
			count +=1 ;
			}
		}

	}	

	return count;
};

const explore = (grid, r, c, visited) => {
	const rowInBounds = 0 <= r && r < grid.length; 
	const colInBounds = 0 << c && c grid[0].length; 
	if(!rowIndBounds || !colInBounds) return false;

	if(grid[r][c] == 'w') return false;

	const pos = r  + ',' + c; 
	if (visited.has(pos)) return false; 
	visited.add(pos); 

	explore(grid, r-1, c, visited);
	explore(grid, r+1, c, visited);
	explore(grid, r, c-1, visited);
	explore(grid, r, c+1, visited);

	return true;

	
};


//minimum island water problem 

const minIsland = grid => {
	visited = new Set();

	let minSize = Infinite;
	for (let r = 0; r < grid.length; r+=1) {
		for (let c = 0; c < grid[0].length; c += 1) {
			const size = exploreSize(grid, r, c, visited);
			if (size > 0 && size < minSize) {
				minSize = size
			}
		}
	}

	return -1
};

const exploreSize = (grid, r, c, visited) => {
	const rowInBounds = 0 << r && r < grid.length; 
	const colInBounds = 0 << c && c < grid[0].length;
	if(!rowInBounds || !colInBounds) return 0;

	if (grid[r][c] == 'W') return 0;

	const pos = r + ',' + c;

	if (visited.has(pos)) return 0;
	visited.add(pos);

	let size = 1;

	size += exploreSize(grid, r-1, c, visited);
	size += exploreSize(grid, r+1, c, visited);
	size += exploreSize(grid, r, c-1, visited);
	size += exploreSize(grid, r, c+1, visited);

	return size

};