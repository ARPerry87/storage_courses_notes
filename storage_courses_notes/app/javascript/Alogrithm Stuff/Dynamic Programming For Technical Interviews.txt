Dynamic programming is solving things in small bits before going at the entire problem 

Part 1. Memoization 
Part 2. Tabulation 

Fibonnaci memoization 

write a function fib(n) takes in a number as an argument the fucntion should return the n-th number of the fib sequence. 

const fib = (n) => { 
	if (n <= 2) return 1;
	return fib(n-1) + fib(n-2);
};

fib(6);
fib(7); 
fib(8);

If you give it a big enough value to n it's slow so to improve the implementation you need to improve it's Big O 

fib of 7 is actually doing 1, 2 and adding those two together, so it's 3, then moving it along, and building it into a big tree of the fibannoci structure into a number and it'll take up a lot of memory because they're all returning their base cases 

const dib = (n) = > { 
	if (n <= 1)
	dib(n-1); 
	dib(n-1);
};

this is O(2^n)time complexity because it's going down a tree from a tree that goes 1 layer, then 2, then 4, then 8, then 16, with a space complexity of O(n)

const lib = (n) => {
	if (n <=1 ) return;
	lib(n-2);
	lib(n-2);	
};

O(2^n)
O(n)

Fibonnaci fits between these two, since they all have exponential time complexity, and an N space complexity

fib(50) would take 2^50 steps 

it would be a massive number 

If we answer the question for a repeating subtree if we see a repeating subsection of a tree, we can answer the problem and get rid of larger sections of the tree. 

Let's get to the code: 


//memoization 
// js object, keys will be arg to fn, value will be return value 

const fib = (n, memo={}) => { 
	if (n in memo) return memo[n];
	if (n <= 2) return 1;
	memo[n] = fib(n-1, memo) + fib(n-2, memo);
	return memo[n]
};

console.log(fib(6)) //8
console.log(fib(7)) //13

const gridTraveler = (m, n, memo={}) => {
	const key = m + ',' + n;
	if (key in memo) return memo[key];
	if (m === 1 && n ===1 ) return 1;
	if (m === 0 || n === 0) return 0;
	memo[key] = gridTraveler(m - 1, n, memo) + gridTraveler(m, n-1, memo);
	return memo[key]

};

console.log(gridTraveler(1,1));
console.log(gridTraveler(2,3));
console.log(gridTraveler(18,18))

With gridTraveler without memoization complexity of time like with fib it's O(2^n+m) 



1. Make it work
	. Visialize the problem as a tree 
	. Implement that tree using a recursion 
	. Test it 

2. Make it effecient 
	. Add a memo object 
	. Add a base case to return memo values 
	. Store return values into the memo 


canSum as dynamic programming 

If we're doing an array and looking for a specific sum within that array, say 7, and we're given an array of numbers, imagine the specific sum you want as a tree, and the array that you are given as the nodes. If you're traveling back from a parent node, the sum that you need has to be subtracted from the parent node, so it would be

7 - 5 = 2 - we can't use this node as it'll give us a negative value 
7 - 3 = 4 - this can give us a positive value 
7 - 4 = 3 - so will this 
7 - 7 = 0 - this has no further choices for us either 

from the array of [5, 3, 4, 7]

The 7, the 3, and 4 all come up with 0s and provide great base cases and should return true, but those that don't provide 0s and can't traverse further, aren't good base cases, and should return false. 

So 3 and 4 will return true, 7 will return true, and the entire tree will return true, while the 5 will return false. 

Let's jump into code! 

const canSum = (targetSum, numbers, memo={}) =>{
	if (targetSum in memo) return memo[targetSum];
	if (targetSUm ===0) return true; 
	if (targetSum < 0 ) return false;

	for (let num of numbers) {
		const remainder = targetSum - num; 
		if (canSum(remainder, numbers, memo) === true) {
			memo[targetSum ] = true;
			return true;

		}

	}

	memo[targetSum] = false;
	return false;

};


howSum in this one instead of true and false we want to print out which numbers can get you to the sum defined in an array. So if you want a 7 and are given an input of [5,3,4,7] then you would want to return the [3,4] or [7] because of the 0s being returned as the base case. 

const howSum = (targetSum, numbers, memo={}) => {
 if (targetSum in memo) return memo[targetSum];
 if (targetSum === 0) return [];
 if (targetSum < 0) return null;

 for (let num of numbers) {
 	const remainder = targetSum - num;
 	const remainderRes = howSum( remainder, numbers, memo);  
 	if (remainderRes !== null) {
 		memo[targetSum] = [...remainderRes, num, memo];
 		return memo[targetSum] 
 	} 
 	
 }	

 memo[remaindRes] = null;
 return null;

};


bestSum problem the smallest or shortest way to reach a given sum, aka optimize the solution from the start, so if given an array of [2,3,4,5] and given the sum of 5 you want to give it the lone [5] as the solution 

const bestSum = (targetSum, numbers, memo={})  => {
	const (targetSum in memo) return memo[targetSum];
	if (targetSum ===0 ) return[];
	if (targetSum <0) return null;

	let shortestCombo = null;

	for (let num of numbers) {
		const remaind = targetSum - num;
		const remainderCombo = bestSum(remainder, numbers, memo);
		if (remainderCombo !== null) {
			const combo = [...remainderCombo, num];
			if (shortestCombo === null || combo.length < shortestCombo.length){
				shortestCombo = combo;
			}
		}
	}	

	memo[shortesCombo] = shortestCombination;
	return shortestCombo;
};


canConstruct that accepts a target string and an array of strings 

if given skateboard and the array [bo, rd, ate, t, ska, sk, boar] return false 

const canConstruct = (target, wordBank, memo={}) => {
	if (target in memo) return memo[target];
	if (target ==='') return true;

	for (let word of wordBank) {
		if (target.indexOfWord(word) === 0) {
			const suffix = target.slice(word.length);
			if(canConstruct(suffix, wordBank, memo) === true) {
				memo[target] = return true;
			}
		}

	}

	memo[target] = false;
	return false;

};


countConstruct that accepts a target string and an array of strings the function should return the number of ways that the target can be constructed by concatenating elements of the wordBank array 

so if given a string of purple and an array of [purp, p, ur, le, purpl] - it'll be 2

const countConstruct = (target, wordBank, memo={}) => {
	if (target in memo) return memo[target];
	if (target === '') return 1;

	let totalCount = 0;

	for (let word of wordBank) {
		if (target.indexOfWord(word) === 0) {
			const numWaysForWays = countConstruct(target.slice(word.length), wordBank, memo);
			totalCount += numWaysForWays;
		}
	}	

	memo[target] = totalCount;
	return totalCount;

};


allConstruct that accepts a target string an array of strings, the functin should return a 2d array containing all the ways that the target can be constructed by contatenating elmenets of the array. 

allConstruct purple [purp, p, ur, le, purpl] - [[purp, le], [p, ur, p, le]] 

make an array of arrays 

if it's not possible to return anything return an empty array 

const allConstruct = (target, wordBank, memo={}) => {
	if (target in memo) = memo[target];
	if (target === '') return [[]];

	const res = [];

	for (let word of wordBank) {
		if (target.indexOf(word) === 0) {
			const suffix = target.slice(word.length);
			const suffixWays = allConstruct(suffix, wordBank, memo);
			const targetWays = suffixWays.map(way => [word, ...way]) //grabbing the word suffix that we want and putting it at the front of the subarray 

			res.push(...targetWays);
		}

	}


	memo[target] = res;
	return res;

};


let's refine the fib function with tabulation 

tabulation uses a table instead of a tree and each step adds two indexes to the step 

const fib = (n) => {
	const table = Array (n + 1).fill(0);
	table[1] = 1
	for(let i = 0; i <= n; i++) {
		table[i +1] += table[i];
		table [i+2] += table[i];
	}
	return table[n];
};


gridTraveler with tabulation 

for tabulation for this problem it's similar to the knapsack problem so the tabulation is basically the knapsack problem 

const gridTraveler = (m, n) => {
	const table = Array(m + 1)
	.fill()
	.map(() => Array(n + 1).fill(0));
	table[1][1] = 1;
	for (let i = 0; i <= m; i++) {
		for (let j = 0; j <= n; j++) {
			const current = table [i][j];
			if (j +1 <= n) table[i][j+1] += current; 
			if (i +1 <= m) table[i+1][j] += current;
		}
	}

	return table[m][n];

};


tabulation recipe 

- visuzalize the problem as a table 
- size the table based on the inputs 
- initalize the table with default values 
- iterate through the table 
- fill further positions based on the current position 


canSum tabulation 

we start off with the target sum as the total array, and then have F as the seed values in the array. Now 0 is the seed value to begin with. 

If you start with 7 for array [5,3,4] it's a true for canSum 

So since 0 is replaceable, 5 is as well, 4, and 3 should all be changed to T while everything else remains at F at the first iteration from index 0. Then you move one step over. There is no 1 in the array, so you cannot modify, and move another step. 

This eventually turns all indexes to T by the time you reach index 3. 

m = targetSum 
n= numbers.length 

O(mn) time 
O(m) space 


code time 



const canSum = (targetSum, numbers) => {
	const table = Array(targetSum + 1).fill(false);
	table[0] = true;

	for (let i = 0; i <= targetSum; i++) {
		if (table[i] === true) {
			for (let num of numbers) {
				table[i + num] = true;
			}
		}
	}

	return table[targetSum];

};


howSum tabulation version 

put null in all squares versus false for this, and for 0 we can give it an empty array. 

take the numbers from a given array to sum up to a number, you can use a number multiple times on iterations 

O(m^2n) time 
O(m^2) 

polynomial not exponintial 





const howSum = (targetSum, numbers) => {
	const table = Array (targetSum +1).fill(null);
	table[0] = [];

	for (let i = 0; i <= targetSum; i++) {
		if (table[i]!== null) {
			for (let num of numbers) {
				table[i+num] = [...table[i], num];
			}
		}
	} 	

	return table[targetSum;]

};