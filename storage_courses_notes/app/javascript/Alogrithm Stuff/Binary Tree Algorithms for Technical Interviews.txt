Creating a binary tree in a very mechanical way with a constructor class, and not a progamatic way: 

class Node {
	constructor(val){
		this.val = val;
		this.left = null;
		this.right = null;
	}
}

const a = new Node('a');
const b = new Node('b');
const c = new Node('c');
const d = new Node('d');
const e = new Node('e');
const f = new Node('f');

a.left = b; 
a.right = c;
b.left = d; 
b.right = e; 
c.right = f


// solving for traveling the binary tree  using depth first aka we need to use a stack, with this it'll go a, b, d, e, c, f with a time complexity it'll be o(n)

This is the iterative one 

/*
class Node {
	constructor(val){
		this.val = val;
		this.left = null;
		this.right = null;
	}
}
*/

const depthFirstValues = (roots) => {
	if (root == null) return [];

	const stack = [root];
	while(stack.length > 0) {
		const current = stack.pop();
		console.log(current.val);
		result.push(current.val);

		if (current.left) stack.push(current.left);
		if (current.right) stack.push(current.right);
	}
	
	return results	
};


Now for the recursive version (call stack gives same type of ordering)

const depthFirstValues = (root) => {
	if (root == null) return []; 

	const leftValues = depthFirstValue(root.left);
	const rightValues = depthFirstValue(root.right);
	return [root.val, ...leftValues, ...rightValues];

};

// Breadth First Binary Tree traversal 

const breadthFirstValues = (root) => {
	if (root == null) return [];

	const values = [];
	const queue = [root];

	while (queue.length > 0) {
		const current = queue.shift();
		values.push(current.val);
		if (current.left != null ) queue.push(current.left);
		if (current.right != null) queue.push(current.right);

	}
	return values;
};

//tree includes problem 

const treeIncludes = (root. target) => {
	if (root == null) return false; //return boolean instead of an empty array

	const queue = [root];
	while (queue.length > 0) {
	const current = queue.shift();
	console.log(cururent.val);
	if (current.val == target) {
		return true; 
	}

	if (current.left) queue.push(current.left);
	if (current.right) queue.push(current.right);
	}

	return false
};


//now for recursion 

const treeIncludes = (root, target) => {
	if (root == null) return false; // can't find target in empty tree
	if (root.val == target) return true; // if the value is found in the tree at all return true 
	return treeIncludes(root.left, target) || treeIncludes(root.right, target); // uses recursion so that if the target is found in the right subtree OR the left subtree, return TRUE 
};

// adding all nodes together recursively 

const treeSum = (root) => {
	if (root == null) return 0; // doesn't evaluate a tree of 0 
	// starting at the root, we go down to the next sub tree, then we add the children, and return the totals 

	return root.val + treeSum(root.left) + treeSum(root.right); // works for all trees of all shapes and sizes
};

now for iterative version 

const treeSum = (root) => {
	if (root == null) = return 0;

	const queue = [root];
	let totalSum = 0
	while (queue.length > 0) {
		const current = queue.shift();
		totalSum += current.val; // iterating over the vaue of the current queue 
		if (current.left != null) queue.push(current.left); //push adds to the back
		if (current.right != null) queue.push(current.right); 

	}	

	return totalSum

};

// tree min value problem 

const treeMinValue = (root) => {
	let smallest = Infinity;
	const stack = [root];

	while(stack.length > 0) {
		const current = stack.pop();
		if (current.val < smallest ) smallest = current.val;

		if (current.left != null) stack.push(current.left);
		if (current.right != right) stack.push(current.right);
	}

	return smallest;

};

// if you want to use a queue instead of a stack 

const treeMinValue = (root) => {
	let smallest = Infinity;
	const queue = [root];

	while(queue.length > 0) {
		const current = shift.pop(); //this runs in O(n^2) 
		if (current.val < smallest ) smallest = current.val;

		if (current.left != null) queue.push(current.left);
		if (current.right != right) queue.push(current.right);
	}

	return smallest;

};

// recursive version 

const treeMinValue = (root) => {
	if (root = null) return Infinity; 
	const leftMin = treeMinValue(root.left);
	const rightMin = treeMinValue(root.left); 
	return Math.min(root.val, leftMin, rightMin);

};

// Max root to leaf path sum 

const maxPathSum = (root) => {
	if (root == null) return -Infinity;
	if (root.left == null && root.right == null) return root.val;
	const maxChildPathSum = Math.max(maxPathSum(root.left), maxPathSum(root.right));
	return root.fal + maxChildPathSum
};

